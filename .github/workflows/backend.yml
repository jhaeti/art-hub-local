name: BACKEND CI / CD

on:
  # push:
  #   branches: [main]
  #   paths:
  #     - "backend/**"
  workflow_dispatch:

jobs:
  Storing-previous-image-with-new-tag:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Check outputs
        run: echo ${{ steps.vars.outputs.sha_short }}

      - name: Retag latest image to outputs.sha_shorts
        run: |
          docker pull ${{secrets.BACKEND_DOCKER_IMAGE}}:latest
          docker tag ${{secrets.BACKEND_DOCKER_IMAGE}}:latest ${{secrets.BACKEND_DOCKER_IMAGE}}:${{ steps.vars.outputs.sha_short }}
          docker push ${{secrets.BACKEND_DOCKER_IMAGE}}:${{ steps.vars.outputs.sha_short }}

  Build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: backend
          push: true
          tags: ${{secrets.BACKEND_DOCKER_IMAGE}}:latest
          secrets: |
            PORT=${{ secrets.PORT }}

  Deploy-to-server:
    needs: Build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
      - run: |
          echo "$SSH_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${SSH_USER}@${SSH_HOST}
